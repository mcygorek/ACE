#include "Largest_EV.hpp"
#include "Parameters.hpp"
#include "Timings.hpp"
#include <iostream>
#include <fstream>
#include <Eigen/Dense>

using namespace ACE;

int main(int args, char **argv){

  Parameters param(args, argv, true);

  int dim=param.get_as_int("dim", 1000);
  int iter=param.get_as_int("iter", 1000);
  double epsilon=param.get_as_double("epsilon", 1e-15);
  bool reortho=param.get_as_bool("reortho",false);

  Eigen::MatrixXd B = Eigen::MatrixXd::Random(dim,dim);
  Eigen::MatrixXcd A = B;
//  Eigen::MatrixXcd A = Eigen::MatrixXcd::Random(dim,dim);

  //Exact:
  time_point time_exact1=now();
  Eigen::ComplexEigenSolver<Eigen::MatrixXcd> solve(A);
  int imax=0; for(int i=1; i<dim; i++){if(std::abs(solve.eigenvalues()(i))>std::abs(solve.eigenvalues()(imax))){imax=i;}}
  Eigen::VectorXcd exactEV=solve.eigenvectors().col(imax);
  std::complex<double> exact=solve.eigenvalues()(imax);
  time_point time_exact2=now();

  //Power iteration:
  time_point time_power1=now();
  Eigen::VectorXcd v=Eigen::VectorXcd::Ones(dim);
  v/=v.norm();
  for(int it=0; it<iter; it++){
    Eigen::VectorXcd v2=A*v;
    double norm2=v2.norm();
    v2/=norm2;
    double diff=1.-std::abs(v2.dot(v));
    std::cout<<"Power iteration: it="<<it<<" diff="<<diff<<std::endl;
    v=v2;
    if(diff<epsilon){
      std::cout<<"Power iteration converged at iteration "<<it<<std::endl; 
      break;
    }
  }
  Eigen::VectorXcd powerEV=v;
  std::complex<double> power=v.dot(A*v);
  time_point time_power2=now();
  
  //Arnoldi:
  time_point time_Arnoldi1=now();
  v=Eigen::VectorXcd::Ones(dim);
  v.normalize();
  std::complex<double> Arnoldi=Largest_EV_Arnoldi(v, iter, epsilon, [&A](const Eigen::VectorXcd &x){return A*x;}, 2, reortho);
  Eigen::VectorXcd ArnoldiEV=v;
  time_point time_Arnoldi2=now();

  //Print results:
  std::cout<<"Exact largest EV: "<<exact<<std::endl;
  std::cout<<"Runtime: "<<time_diff(time_exact2-time_exact1)<<"ms"<<std::endl;
  std::cout<<std::endl;

  std::cout<<"Power iteration EV: "<<power<<" 1-|ev-exact|="<<1.-std::abs(powerEV.dot(exactEV))<<std::endl;
  std::cout<<"Runtime: "<<time_diff(time_power2-time_power1)<<"ms"<<std::endl;
  std::cout<<std::endl;

  std::cout<<"Arnoldi EV: "<<Arnoldi<<" 1-|ev-exact|="<<1.-std::abs(ArnoldiEV.dot(exactEV))<<std::endl;
  std::cout<<"Runtime: "<<time_diff(time_Arnoldi2-time_Arnoldi1)<<"ms"<<std::endl;
  std::cout<<std::endl;



  std::string print_convergence=param.get_as_string("print_convergence");
  if(print_convergence!=""){
    std::ofstream ofs(print_convergence.c_str());
    for(int iter2=3; iter2<iter; iter2++){
      
      time_point time_power1=now();
      Eigen::VectorXcd v=Eigen::VectorXcd::Ones(dim);
      v/=v.norm();
      for(int it=0; it<iter2; it++){
        Eigen::VectorXcd v2=A*v;
        double norm2=v2.norm();
        v2/=norm2;
        double diff=1.-std::abs(v2.dot(v));
        v=v2;
        if(diff<epsilon){
          break;
        }
      }
      Eigen::VectorXcd powerEV=v;
      std::complex<double> power=v.dot(A*v);
      time_point time_power2=now();
     
      ofs<<iter2;
      ofs<<" "<<std::abs(1.-std::abs(powerEV.dot(exactEV)));
      ofs<<" "<<time_diff(time_power2-time_power1);

      time_point time_Arnoldi1=now();
      v=Eigen::VectorXcd::Ones(dim);
      v.normalize();
      std::complex<double> Arnoldi=Largest_EV_Arnoldi(v, iter2, epsilon, [&A](const Eigen::VectorXcd &x){return A*x;}, 0, reortho);
      Eigen::VectorXcd ArnoldiEV=v;
      time_point time_Arnoldi2=now();

      ofs<<" "<<std::abs(1.-std::abs(ArnoldiEV.dot(exactEV)));
      ofs<<" "<<time_diff(time_Arnoldi2-time_Arnoldi1);



      time_point time_mpower1=now();
      Eigen::VectorXcd v0=Eigen::VectorXcd::Ones(dim);

      Eigen::VectorXcd v1(v0.size());
      Eigen::VectorXcd v2(v0.size());
      Eigen::VectorXcd v3(v0.size());

      double h0=v0.norm();
      v0/=h0; 
      v1=A*v0;
      std::complex<double> nu0=v1.dot(v0);
      double diff0=(v1-nu0*v0).norm();
  
      double h1=v1.norm();
      v1/=h1; 
      v2=A*v1;
      std::complex<double> nu1=v2.dot(v1);
      double diff1=(v2-nu1*v1).norm();
 
     for(int i=0; i<10; i++){
      v0.swap(v1); v1.swap(v2); h0=h1; diff0=diff1; nu0=nu1;
      h1=v1.norm();
      v1/=h1; 
      v2=A*v1;
      nu1=v2.dot(v1);
      diff1=(v2-nu1*v1).norm();
     }
      
      double r1=1.; if(diff1<diff0)r1=diff1/diff0;
      for(int it=12; it<iter2; it++){
        std::complex<double> beta=nu1*nu1*r1*r1/4.;
        v2-=(beta/h1)*v0;
        double h2=v2.norm();
        v2/=h2;
        v3=A*v2;
        std::complex<double> nu2=v3.dot(v2);
        double diff2=(v3-nu2*v2).norm();
        double rho1=1.; if(diff2<diff1)rho1=diff2/diff1;
        double r2=2.*rho1/(1.+rho1*rho1);

        v0.swap(v1); v1.swap(v2); v2.swap(v3);
        r1=r2; h0=h1; h1=h2; nu1=nu2; diff1=diff2;
        if(diff2<epsilon){
          break;
        }
      }
      Eigen::VectorXcd mpowerEV=v2;
      mpowerEV.normalize();
      std::complex<double> mpower=mpowerEV.dot(A*mpowerEV);
      time_point time_mpower2=now();
     
      ofs<<" "<<std::abs(1.-std::abs(mpowerEV.dot(exactEV)));
      ofs<<" "<<time_diff(time_mpower2-time_mpower1);
      ofs<<std::endl;
    }
  }
  return 0;
}
